Install from requirements.txt
pip install -r requirements.txt

Learned From Results return

in model returns : 
boxes - object
masks
names as labels in dict with key as 0 - n as numbers ({0:Person,1:Bicycle})
orig_img - returing [[50, 54, 37],[50, 54, 37],[50, 54, 37]] may be pixels with rgb values
orig_shape: (480, 640)
save_dir: 'runs\\detect\\predict'
speed: {'preprocess': 3.54766845703125, 'inference': 107.22994804382324, 'postprocess': 2.5186538696289062}]
--------------------------------------------------------------------------------------
in result[0].boxes --- single frame capture

cls: tensor([0.]) -- class label
conf: tensor([0.9001]) --- confidence score
data: tensor([[124.2262,  92.4236, 639.1179, 479.2845,   0.9001,   0.0000]])
id: None
is_track: False
orig_shape: (480, 640)
shape: torch.Size([1, 6])
xywh: tensor([[381.6721, 285.8541, 514.8917, 386.8609]])
xywhn: tensor([[0.5964, 0.5955, 0.8045, 0.8060]])
xyxy: tensor([[124.2262,  92.4236, 639.1179, 479.2845]])
xyxyn: tensor([[0.1941, 0.1925, 0.9986, 0.9985]])

getting co-ordinates from xyxy

x1, y1, x2, y2 = map(int, box.xyxy[0])  # Bounding box coordinates


loop resp
if it detects a person
0: 480x640 1 person, 139.3ms
Speed: 5.0ms preprocess, 139.3ms inference, 2.0ms postprocess per image at shape (1, 3, 480, 640)


Wanna do : 

Filter Detections
	onfidence Thresholding: Only consider objects with a confidence score above a certain threshold.
	Class Filtering: Only process detections for specific classes of interest (e.g., only detect "person" and ignore other objects).
